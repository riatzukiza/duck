"""
Sends out approved messages generated by the duck gpt model to discord
client.
"""
import discord
import pymongo
import asyncio

import shared.settings as settings
from shared.mongodb import generated_message_collection

intents = discord.Intents.default()
client = discord.Client(intents=intents)

async def send_message(message,sent_messages):
    """
    Send a message to the discord channel.
    """
    generated_message_collection.update_one(
        {"_id": message["_id"]},
        {"$set": { "sent": True}}
    )
    try:
        print("trying sending",message['content'],"to",message['channel'])
        channel = client.get_channel(int(message['channel']))
    except Exception as e:
        print("failed to get generated channel.")
        print("trying sending",message['content'],"to default channel")
        channel= client.get_channel(int(settings.DEFAULT_CHANNEL))
        pass
    if f"{message['channel']}:{message['content']}" not in sent_messages:
        sent_messages.add(f"{message['channel']}:{message['content']}")
        try:
            print("trying to send message",message['content'])
            print(f"to {channel.name}")
            await channel.send(message['content'])
        except Exception as e:
            print("to default channel")
            channel= client.get_channel(int(settings.DEFAULT_CHANNEL))
            await channel.send(message['content'])
            pass
    else:
        print("Not so unique",message)


def get_unsent_messages():
    """
    Get messages the model has not yet sent.
    """
    return generated_message_collection.find({
        "sent": False
    }).sort([("created_at", 1)])


@client.event
async def on_ready():
    print(f'Logged in as {client.user}')
    sent_messages=set()
    while True:
        try:
            unsent_messages = list(get_unsent_messages())
            if unsent_messages:
                print("unsent messages found!", len(unsent_messages))
                for message in unsent_messages:
                    await send_message(message,sent_messages)
                    await asyncio.sleep(3)
        except Exception as e:
            print("somthing went wrong in dispatch!")
            print(e)



client.run(settings.DISCORD_TOKEN)
